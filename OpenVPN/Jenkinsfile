pipeline {
    agent any
    parameters {
        string(
            name: 'REMOTE_SERVER',
            description: "Target server for deploy OpenVPN server"
        )
        string(
            name: 'REMOTE_SERVER_PORT',
            defaultValue: '22',
            description: "Target server ssh port"
        )
        string(
            name: 'REMOTE_USER',
            defaultValue: 'root',
            description: "Target server root user"
        )
        password(
            name: 'REMOTE_PASSWORD',
            description: "Target server root password"
        )
        booleanParam(
            name: 'CHECK_MODE',
            defaultValue: false,
            description: "Run ansible playbook dry run"
        )
        string(
            name: 'CLIENTS',
            defaultValue: 'client',
            description: "Comma separated list of OpenVPN servers clients names. For example: client1,client2"
        )
        string(
            name: 'OPENVPN_PORT',
            defaultValue: '1194',
            description: "OpenVPN server port"
        )
        choice(
            name: 'OPENVPN_PROTOCOL',
            choices: ['udp', 'tcp'],
            description: 'OpenVPN server protocol (UDP or TCP)'
        )
        string(
            name: 'DNS',
            defaultValue: '1.1.1.1',
            description: "Comma separated list of DNS used by OpenVPN server. For example: 8.8.4.4,8.8.8.8"
        )
        booleanParam(
            name: 'USE_UFW',
            defaultValue: true,
            description: "Use the Uncomplicated Firewall (or you may use other firewall)"
        )
        string(
            name: 'EASY_RSA_PATH',
            defaultValue: 'ovpn-easy-rsa',
            description: "CA-storage location on CA server"
        )
        string(
            name: 'CLIENTS_PATH',
            defaultValue: 'ovpn-clients',
            description: "Client's ovpn-configs location on localhost"
        )
        string(
            name: 'SERVER_CN',
            defaultValue: 'ovpn-server',
            description: "Server common name"
        )
        string(
            name: 'OPENVPN_VERSION',
            defaultValue: 'latest',
            description: "OpenVPN apt package version"
        )
        booleanParam(
            name: 'RESET_EASY_RSA',
            defaultValue: false,
            description: "Delete currently existing Easy RSA directory"
        )
        string(
            name: 'BUILD_ID',
            defaultValue: 'No ID',
            description: "Build identifier"
        )
    }
    stages {
        stage('Initialization') {
            steps {
                cleanWs()
                echo 'Pipeline running with next parameters:'
                script {
                    paramsString = ''
                    params.each { key, value ->
                        if (key == 'REMOTE_PASSWORD') {
                            value = '********'
                        }
                        paramsString += "\t$key: $value\n"
                    }
                    echo paramsString
                    if (params.CHECK_MODE) {
                        echo '=====================================\n' +
                            '             CHECK MODE\n' +
                            '====================================='
                    }
                    currentBuild.displayName = "#${BUILD_NUMBER} - ${params.BUILD_ID}"
                }
                echo '---------------------------------------'
                echo 'Check parameters...'
                script {
                    if (env.BUILD_NUMBER.toInteger() == 1) {
                        echo "First time build. Pipeline initialized. Rebuild pipeline with parameters."
                        return
                    }
                    if (!params.REMOTE_SERVER) {
                        error("Required pipeline parameter 'REMOTE_SERVER' is empty!")
                    }
                    if (!params.REMOTE_PASSWORD) {
                        error("Required pipeline parameter 'REMOTE_PASSWORD' is empty!")
                    }
                }
                echo 'Parameters checked!'
            }
        }
        stage('Pull required files') {
            steps {
                git url: 'https://github.com/spector517/freedomnet-deploy.git', branch: 'main'
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1
                }
            }
        }
        stage('Generate ansible files') {
            steps {
                echo 'Generating vars file...'
                script {
                    def vars = [
                        openvpn_url: params.REMOTE_SERVER,
                        openvpn_port: params.OPENVPN_PORT,
                        openvpn_protocol: params.OPENVPN_PROTOCOL,
                        openvpn_use_ufw: params.USE_UFW,
                        openvpn_dns: params.DNS.split(',') as List,
                        openvpn_clients: params.CLIENTS.split(',').collect { client  ->
                            [name: client]
                        },
                        openvpn_ca_host: params.REMOTE_SERVER,
                        openvpn_easy_rsa_path: params.EASY_RSA_PATH,
                        openvpn_clients_path: params.CLIENTS_PATH,
                        openvpn_server_cn: params.SERVER_CN,
                        openvpn_package_version: params.OPENVPN_VERSION,
                        openvpn_reset_easy_rsa: params.RESET_EASY_RSA,
                        openvpn_easyrsa_req_cn: params.SERVER_CN,
                    ]
                    writeYaml file: 'vars.yml', data: vars, overwrite: true
                    sh 'cat vars.yml'
                }
                echo 'Vars file generated successfully!'

                echo 'Generating inventory file...'
                script {
                    def inventory = "$params.REMOTE_SERVER" +
                        " ansible_user=$params.REMOTE_USER" +
                        " ansible_password=$params.REMOTE_PASSWORD"
                    writeFile file: 'inventory.txt', text: inventory
                    sh 'cat inventory.txt'
                }
                echo 'Inventory file generated successfully!'

                echo 'Generating playbook...'
                script {
                    def playbook = "- hosts: all\n" +
                        "  roles:\n" +
                        "  - role: spector517.openvpn"
                    writeFile file: 'playbook.yml', text: playbook
                    sh 'cat playbook.yml'
                }
                echo 'Playbook generated successfully!'
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1
                }
            }
        }
        stage('Deploy OpenVPN server') {
            steps {
                echo 'Running ansible playbook...'
                sh 'ansible-galaxy install --force spector517.openvpn'
                withEnv(['ANSIBLE_HOST_KEY_CHECKING=False']) {
                    ansiblePlaybook(
                        playbook: 'playbook.yml',
                        inventory: 'inventory.txt',
                        extras: "-e @vars.yml ${if (params.CHECK_MODE) '--check' else ''}"
                    )
                }
                echo 'Playbook executed successfully!'
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1
                }
            }
        }
        stage('Run test') {
            steps {
                echo 'Running test...'
                script {
                    def remoteServerIp = (
                        sh(
                            script: "ping $REMOTE_SERVER -c 4",
                            returnStdout: true
                        ) =~ /(?<=\()[0-9\.]+(?!=\))/
                    )[0]
                    echo "Remote server IP: $remoteServerIp"
                    echo 'Find client config'
                    clientConfig = findFiles(glob: "$params.CLIENTS_PATH/*.ovpn")[0]
                    echo "Found client config: $clientConfig"
                    sh 'mkdir -p OpenVPN/client-docker/clients'
                    sh "cp $clientConfig.path OpenVPN/client-docker/clients/client.ovpn"
                    try {
                        echo 'Build OpenVPN client docker image'
                        dir('OpenVPN/client-docker') {
                            sh 'sudo docker build --rm --tag ovpn_client .'
                        }
                        echo 'Run OpenVPN client docker container'
                        sh "sudo docker run --detach --name temp_client" +
                            " --volume ${pwd()}/OpenVPN/client-docker/clients:/etc/openvpn/clients" + 
                            " --cap-add=NET_ADMIN --device=/dev/net/tun" +
                            " ovpn_client"
                        try {
                            retry(count: 3) {
                                attempt = 1
                                echo "Attempt: $attempt, wait 5 seconds..."
                                sleep time: 5, unit: 'SECONDS'
                                echo 'Sending request via container'
                                def response = sh(
                                    script: "sudo docker exec temp_client curl 'https://api.ipify.org'",
                                    returnStdout: true
                                )
                                if (remoteServerIp == response) {
                                    echo "Response IP '$response' equal remote server IP '$remoteServerIp'"
                                    echo 'Test passed!'
                                } else {
                                    attempt++
                                    error("Response IP '$response' not equal remote server IP '$remoteServerIp'")
                                }
                            }
                        } catch(Exception ex) {
                            echo ex.getMessage()
                            unstable(message: 'Test failed!')
                        }
                    } finally {
                        sh "sudo docker rm temp_client --force"
                        sh "sudo docker rmi ovpn_client"
                    }
                }
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1 && !params.CHECK_MODE
                }
            }
        }
        stage('Process results') {
            steps {
                archiveArtifacts 'ovpn-clients/*.ovpn'
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1 && !params.CHECK_MODE
                }
            }
        }
    }
}