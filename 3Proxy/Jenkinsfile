pipeline {
    agent any
    parameters {
        string(
            name: 'REMOTE_SERVER',
            description: "Target server for deploy '3Proxy' (DNS or IPv4)"
        )
        string(
            name: 'REMOTE_SERVER_PORT',
            defaultValue: '22',
            description: "Target server ssh port"
        )
        string(
            name: 'REMOTE_USER',
            defaultValue: 'root',
            description: "Target server root user"
        )
        password(
            name: 'REMOTE_PASSWORD',
            description: "Target server root password"
        )
        booleanParam(
            name: 'CHECK_MODE',
            defaultValue: false,
            description: "Run ansible playbook dry run"
        )
        string(
            name: 'CLIENTS',
            defaultValue: 'client0:qwe1',
            description: "Comma separated list of clients '3Proxy' server. For example, 'user1:pass1,user2:pass2'." +
                " Allow all connections if empty"
        )
        string(
            name: 'PROXY_VERSION', 
            defaultValue: '0.9.4',
            description: "Distrib version of the '3Proxy' proxy server"
        )
        string(
            name: 'BUILD_ESSENTIAL_VERSION',
            defaultValue: 'latest',
            description: "Build essential apt version"
        )
        string(
            name: 'HTTP_PORT',
            defaultValue: '3128',
            description: "HTTP-proxy port number of '3Proxy'"
        )
        string(
            name: 'SOCKS_PORT',
            defaultValue: '1080',
            description: "SOCKSv4/SOCKSv5 port number of '3Proxy'"
        )
        string(
            name: 'SYSTEM_GROUP_ID',
            defaultValue: '200',
            description: "System group id on remotes"
        )
        string(
            name:'SYSTEM_USER_ID',
            defaultValue: '201',
            description: "System user id on remotes"
        )
        string(
            name: 'DNS',
            defaultValue: '1.1.1.1,1.0.0.1',
            description: "Comma separated list of DNS used by '3Proxy'"
        )
        booleanParam(
            name: 'USE_UFW',
            defaultValue: true,
            description: "Use the Uncomplicated Firewall (or you may use other firewall)"
        )
        string(
            name: 'BUILD_ID',
            defaultValue: 'No ID',
            description: "Build identifier"
        )
    }
    stages {
        stage('Initialization') {
            steps {
                cleanWs()
                echo 'Pipeline running with next parameters:'
                script {
                    paramsString = ''
                    params.each { key, value ->
                        if (key == 'REMOTE_PASSWORD') {
                            value = '********'
                        }
                        paramsString += "\t$key: $value\n"
                    }
                    echo paramsString
                    if (params.CHECK_MODE) {
                        echo '=====================================\n' +
                            '             CHECK MODE\n' +
                            '====================================='
                    }
                    currentBuild.displayName = "#${BUILD_NUMBER} - ${params.BUILD_ID}"
                }
                echo '---------------------------------------'
                echo 'Check parameters...'
                script {
                    if (env.BUILD_NUMBER.toInteger() == 1) {
                        echo "First time build. Pipeline initialized. Rebuild pipeline with parameters."
                        return
                    }
                    if (!params.REMOTE_SERVER) {
                        error("Required pipeline parameter 'REMOTE_SERVER' is empty!")
                    }
                    if (!params.REMOTE_PASSWORD) {
                        error("Required pipeline parameter 'REMOTE_PASSWORD' is empty!")
                    }
                }
                echo 'Parameters checked!'
                echo 'Remove known hosts from agent'
                sh 'rm -f ~/.ssh/known_hosts'
            }
        }
        stage('Generate Ansible files') {
            steps {
                echo 'Generating vars file...'
                script {
                    def clients = []
                    if (params.CLIENTS) {
                        params.CLIENTS.split(',').each { client ->
                            clients << [
                                name: client.split(':')[0],
                                password: client.split(':')[1]
                            ]
                        }
                    }
                    def vars = [
                        proxy3_version: params.PROXY_VERSION,
                        proxy3_http_port: params.HTTP_PORT,
                        proxy3_socks_port: params.SOCKS_PORT,
                        proxy3_system_group_id: params.SYSTEM_GROUP_ID,
                        proxy3_system_user_id: params.SYSTEM_USER_ID,
                        proxy3_dns: params.DNS.split(',') as List,
                        proxy3_use_ufw: params.USE_UFW,
                        proxy3_build_essential_version: params.BUILD_ESSENTIAL_VERSION,
                        proxy3_clients: clients,
                    ]
                    writeYaml file: 'vars.yml', data: vars, overwrite: true
                    sh 'cat vars.yml'
                }
                echo 'Vars file generated successfully!'

                echo 'Generating inventory file...'
                script {
                    def inventory = "$params.REMOTE_SERVER" +
                        " ansible_user=$params.REMOTE_USER" +
                        " ansible_password=$params.REMOTE_PASSWORD"
                    writeFile file: 'inventory.txt', text: inventory
                    sh 'cat inventory.txt'
                }
                echo 'Inventory file generated successfully!'

                echo 'Generating playbook...'
                script {
                    def playbook = "- hosts: all\n" +
                        "  roles:\n" +
                        "  - role: spector517.proxy3"
                    writeFile file: 'playbook.yml', text: playbook
                    sh 'cat playbook.yml'
                }
                echo 'Playbook generated successfully!'
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1
                }
            }
        }
        stage('Deploy 3Proxy server') {
            steps {
                echo 'Running ansible playbook...'
                sh 'ansible-galaxy install --force spector517.proxy3'
                withEnv(['ANSIBLE_HOST_KEY_CHECKING=False']) {
                    ansiblePlaybook(
                        playbook: 'playbook.yml',
                        inventory: 'inventory.txt',
                        extras: "-e @vars.yml ${if (params.CHECK_MODE) '--check' else ''}"
                    )
                }
                echo 'Playbook executed successfully!'
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1
                }
            }
        }
        stage('Run tests') {
            steps {
                echo 'Running tests...'
                script {
                    def remoteServerIp = (
                        sh(
                            script: "ping $REMOTE_SERVER -c 4",
                            returnStdout: true
                        ) =~ /(?<=\()[0-9\.]+(?!=\))/
                    )[0]
                    def client = params.CLIENTS.split(',')[0]
                    echo "Remote server IP: $remoteServerIp"

                    // Run HTTP-proxy test
                    echo '[HTTP-proxy] Test...'
                    def response = sh(
                        script: """curl -x '$REMOTE_SERVER:$HTTP_PORT' \
                            ${if (client) "-U '$client'" else ''} \
                            'https://api.ipify.org' || echo 'error'
                        """,
                        returnStdout: true
                    ).trim()
                    if (response == remoteServerIp) {
                        echo '[HTTP-proxy] Test passed!'
                    } else {
                        echo "Response IP '$response' not equal remote server IP '$remoteServerIp'"
                        unstable(message: '[HTTP-proxy] Test failed!')
                    }

                    // Run SOCKSv5-proxy test
                    echo '[SOCKSv5-proxy] Test...'
                    response = sh(
                        script: """curl --socks5 '$REMOTE_SERVER:$SOCKS_PORT' \
                            ${if (client) "-U '$client'" else ''} \
                            'https://api.ipify.org' || echo 'error'
                        """,
                        returnStdout: true
                    ).trim()
                    if (response == remoteServerIp) {
                        echo '[SOCKSv5-proxy] Test passed!'
                    } else {
                        echo "Response IP '$response' not equal remote server IP '$remoteServerIp'"
                        unstable(message: '[SOCKSv5-proxy] Test failed!')
                    }
                }
            }
            when {
                expression {
                    return env.BUILD_NUMBER.toInteger() > 1 && !params.CHECK_MODE
                }
            }
        }
    }
}